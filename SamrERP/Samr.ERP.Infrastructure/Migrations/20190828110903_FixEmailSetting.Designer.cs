// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Samr.ERP.Infrastructure.Data;

namespace Samr.ERP.Infrastructure.Migrations
{
    [DbContext(typeof(SamrDbContext))]
    [Migration("20190828110903_FixEmailSetting")]
    partial class FixEmailSetting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.ActiveUserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("Token");

                    b.HasKey("UserId");

                    b.ToTable("ActiveUserTokens");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid?>("RootId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.DepartmentLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<Guid>("DepartmentId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid?>("RootId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentLogs");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmailMessageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<Guid>("EmailSettingId");

                    b.Property<string>("Message");

                    b.Property<string>("ReceiverEmail");

                    b.Property<Guid>("ReceiverUserId");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EmailSettingId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("EmailMessageHistories");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmailSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("EnabledSSL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<int>("MailPort");

                    b.Property<string>("MailServer")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("MailServerName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Password");

                    b.Property<string>("Sender")
                        .IsRequired();

                    b.Property<string>("SenderName")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("EmailSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a3fcddb-4680-4206-b712-4e07df82e354"),
                            CreatedAt = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            EnabledSSL = true,
                            IsActive = true,
                            IsDefault = true,
                            MailPort = 465,
                            MailServer = "smtp.yandex.ru",
                            MailServerName = "Yandex Mail",
                            Password = "formignow",
                            Sender = "migdev@mig.tj",
                            SenderName = "Mig Dev"
                        });
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid?>("EmployeeLockReasonId");

                    b.Property<string>("FactualAddress")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<Guid>("GenderId");

                    b.Property<DateTime>("HireDate");

                    b.Property<string>("ImageName")
                        .HasMaxLength(32);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime?>("LockDate");

                    b.Property<Guid?>("LockUserId");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(32);

                    b.Property<Guid?>("NationalityId");

                    b.Property<string>("PassportAddress")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("PassportIssueDate");

                    b.Property<string>("PassportIssuer")
                        .HasMaxLength(64);

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(32);

                    b.Property<string>("PassportScanPath");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.Property<string>("PhotoPath");

                    b.Property<Guid>("PositionId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EmployeeLockReasonId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LockUserId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmployeeLockReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("EmployeeLockReasons");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmployeeLockReasonLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<Guid>("EmployeeLockReasonId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EmployeeLockReasonId");

                    b.ToTable("EmployeeLockReasonLogs");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmployeeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid>("EmployeeId");

                    b.Property<Guid?>("EmployeeLockReasonId");

                    b.Property<string>("FactualAddress")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<Guid>("GenderId");

                    b.Property<DateTime>("HireDate");

                    b.Property<string>("ImageName")
                        .HasMaxLength(32);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime?>("LockDate");

                    b.Property<Guid?>("LockUserId");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(32);

                    b.Property<Guid?>("NationalityId");

                    b.Property<string>("PassportAddress")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("PassportIssueDate");

                    b.Property<string>("PassportIssuer")
                        .HasMaxLength(64);

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(32);

                    b.Property<string>("PassportScanPath");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.Property<string>("PhotoPath");

                    b.Property<Guid>("PositionId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeLockReasonId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LockUserId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeLogs");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.FileArchive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<Guid>("FileCategoryId");

                    b.Property<string>("FilePath")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("FileCategoryId");

                    b.ToTable("FileArchives");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.FileArchiveCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("FileArchiveCategories");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.FileArchiveCategoryLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<Guid?>("FileArchiveCategoryId");

                    b.Property<Guid>("FileCategoryId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("FileArchiveCategoryId");

                    b.ToTable("FileArchiveCategoryLogs");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(16);

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dac6d4fa-0502-43da-9368-9198e479f89d"),
                            Name = "Мужской"
                        },
                        new
                        {
                            Id = new Guid("0ce7a31f-dfd6-4bdc-ae57-32087c383705"),
                            Name = "Женский"
                        });
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Nationality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.NationalityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("NationalityId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("NationalityId");

                    b.ToTable("NationalityLogs");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<Guid>("NewsCategoryId");

                    b.Property<DateTime>("PublishAt");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("NewsCategoryId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.NewsCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("NewsCategories");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.NewsCategoryLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("NewsCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("NewsCategoryId");

                    b.ToTable("NewsCategoryLogs");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<DateTime?>("ReadDate");

                    b.Property<Guid?>("ReceiverUserId");

                    b.Property<Guid?>("SenderUserId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<Guid>("DepartmentId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.PositionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<Guid>("DepartmentId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid>("PositionId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionLogs");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Expires");

                    b.Property<bool>("IsActive");

                    b.Property<string>("RemoteIpAddress");

                    b.Property<string>("Token");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("CategoryName");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2702bcdd-104b-475d-14b5-08d70c357974"),
                            Category = "Employee",
                            CategoryName = "Сотрудники",
                            ConcurrencyStamp = "23F4A768-BCF3-4BA4-8D20-CC3E4A9C333A",
                            Description = "Просмотр списка",
                            Name = "Employee.All",
                            NormalizedName = "EMPLOYEE.ALL"
                        },
                        new
                        {
                            Id = new Guid("29ecf6ce-b82f-4fc5-ae01-08d70cf9f908"),
                            Category = "Employee",
                            CategoryName = "Сотрудники",
                            ConcurrencyStamp = "B8EFD7E4-72E8-4110-96CC-A531AD35D9B4",
                            Description = "Создание",
                            Name = "Employee.Create",
                            NormalizedName = "EMPLOYEE.CREATE"
                        },
                        new
                        {
                            Id = new Guid("a8eb0e97-eaaa-4976-ae02-08d70cf9f908"),
                            Category = "Employee",
                            CategoryName = "Сотрудники",
                            ConcurrencyStamp = "98003B79-EE18-4D7F-B8A5-357E74E8F77A",
                            Description = "Редактирование",
                            Name = "Employee.Edit",
                            NormalizedName = "EMPLOYEE.EDIT"
                        },
                        new
                        {
                            Id = new Guid("c5dbeaab-86a3-4400-b50a-08d70e6b40dc"),
                            Category = "Employee",
                            CategoryName = "Сотрудники",
                            ConcurrencyStamp = "36271C6B-8972-4A69-90D0-D9921B6F90D3",
                            Description = "Подробная информация",
                            Name = "Employee.Details",
                            NormalizedName = "EMPLOYEE.DETAILS"
                        });
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.SMPPSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<string>("Host");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Password");

                    b.Property<int>("PortNumber");

                    b.Property<string>("ProviderName");

                    b.Property<string>("SystemId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("SMPPSettings");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.SMSMessageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<string>("Message");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("ReceiverUserId");

                    b.Property<Guid>("SMPPSettingId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SMPPSettingId");

                    b.ToTable("SMSMessageHistories");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UsefulLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Url")
                        .IsRequired();

                    b.Property<Guid>("UsefulLinkCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UsefulLinkCategoryId");

                    b.ToTable("UsefulLinks");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UsefulLinkCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("UsefulLinkCategories");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UsefulLinkCategoryLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("UsefulLinkCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UsefulLinkCategoryId");

                    b.ToTable("UsefulLinkCategoryLogs");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("ChangePasswordConfirmationCode")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("ChangePasswordConfirmationCodeExpires");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<Guid>("EmployeeId");

                    b.Property<DateTime?>("LockDate");

                    b.Property<Guid?>("LockUserId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<Guid?>("UserLockReasonId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LockUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UserLockReasonId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9132A248-C5F8-4B01-91FB-9AF3777FCA48",
                            Email = "migdev@mig.tj",
                            EmailConfirmed = false,
                            EmployeeId = new Guid("00000000-0000-0000-0000-000000000000"),
                            LockoutEnabled = false,
                            NormalizedUserName = "000000000",
                            PasswordHash = "AQAAAAEAACcQAAAAEOvH5DQ4ttSuk1j8EVrg4uyxzHJGcnZbuhkdRvuppk2ttPByA/FjKpVcrA001HW68w==",
                            PhoneNumber = "000000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83147D9F-26BC-486F-AE7E-5DD581362FAA",
                            TwoFactorEnabled = false,
                            UserName = "000000000"
                        });
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UserLockReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("UserLockReasons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedAt = new DateTime(2019, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            IsActive = false
                        });
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UserLockReasonLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CreatedUserId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.Property<Guid>("UserLockReasonId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UserLockReasonId");

                    b.ToTable("UserLockReasonLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.ActiveUserToken", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Department", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.DepartmentLog", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmailMessageHistory", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.EmailSetting", "EmailSetting")
                        .WithMany()
                        .HasForeignKey("EmailSettingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmailSetting", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Employee", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.EmployeeLockReason", "EmployeeLockReason")
                        .WithMany()
                        .HasForeignKey("EmployeeLockReasonId");

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "LockUser")
                        .WithMany()
                        .HasForeignKey("LockUserId");

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Samr.ERP.Infrastructure.Entities.Employee", "UserId");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmployeeLockReason", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmployeeLockReasonLog", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.EmployeeLockReason", "EmployeeLockReason")
                        .WithMany()
                        .HasForeignKey("EmployeeLockReasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.EmployeeLog", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.EmployeeLockReason", "EmployeeLockReason")
                        .WithMany()
                        .HasForeignKey("EmployeeLockReasonId");

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "LockUser")
                        .WithMany()
                        .HasForeignKey("LockUserId");

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.FileArchive", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.FileArchiveCategory", "FileArchiveCategory")
                        .WithMany()
                        .HasForeignKey("FileCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.FileArchiveCategory", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.FileArchiveCategoryLog", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.FileArchiveCategory", "FileArchiveCategory")
                        .WithMany()
                        .HasForeignKey("FileArchiveCategoryId");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Nationality", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.NationalityLog", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.News", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.NewsCategory", "NewsCategory")
                        .WithMany()
                        .HasForeignKey("NewsCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.NewsCategory", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.NewsCategoryLog", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.NewsCategory", "NewsCategory")
                        .WithMany()
                        .HasForeignKey("NewsCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Notification", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId");

                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.Position", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.PositionLog", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.RefreshToken", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.SMPPSetting", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.SMSMessageHistory", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.SMPPSetting", "SMPPSetting")
                        .WithMany()
                        .HasForeignKey("SMPPSettingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UsefulLink", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.UsefulLinkCategory", "UsefulLinkCategory")
                        .WithMany()
                        .HasForeignKey("UsefulLinkCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UsefulLinkCategory", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UsefulLinkCategoryLog", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.UsefulLinkCategory", "UsefulLinkCategory")
                        .WithMany()
                        .HasForeignKey("UsefulLinkCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.User", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "LockUser")
                        .WithMany()
                        .HasForeignKey("LockUserId");

                    b.HasOne("Samr.ERP.Infrastructure.Entities.UserLockReason", "UserLockReason")
                        .WithMany()
                        .HasForeignKey("UserLockReasonId");
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UserLockReason", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Samr.ERP.Infrastructure.Entities.UserLockReasonLog", b =>
                {
                    b.HasOne("Samr.ERP.Infrastructure.Entities.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Samr.ERP.Infrastructure.Entities.UserLockReason", "UserLockReason")
                        .WithMany()
                        .HasForeignKey("UserLockReasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
