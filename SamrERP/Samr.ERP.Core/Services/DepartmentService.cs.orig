using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Samr.ERP.Core.Interfaces;
using Samr.ERP.Core.Models.ErrorModels;
using Samr.ERP.Core.Models.ResponseModels;
using Samr.ERP.Core.ViewModels.Department;
using Samr.ERP.Infrastructure.Data.Contracts;
using Samr.ERP.Infrastructure.Entities;

namespace Samr.ERP.Core.Services
{
    public class DepartmentService : IDepartmentService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;

        public DepartmentService(IUnitOfWork unitOfWork, IMapper mapper)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
        }

        public async Task<BaseResponse<DepartmentViewModel>> GetByIdAsync(Guid id)
        {
<<<<<<< HEAD
            //var department = await _unitOfWork.Departments.GetByIdAsync(id);
            var department = _unitOfWork.Departments.GetDbSet().Include(u => u.CreatedUser).ToList();

            var vm = _mapper.Map<DepartmentViewModel>(department);
            
            var response = new BaseResponse<DepartmentViewModel>(vm, true);
=======
            var departmentResult = await _unitOfWork.Departments
                .GetByIdAsync(id);
            var firstOrDefault = _unitOfWork.Departments.GetDbSet().Include(p => p.CreatedUser).FirstOrDefault(p => p.Id == id);
         

            var response = new BaseResponse<Department>(departmentResult, true);
>>>>>>> df040c5eb6c0f547738ba02f7a6e3924818f0a57

            return response;
        }

        public async Task<BaseResponse<IEnumerable<DepartmentViewModel>>> GetAll()
        {
            //var department = _unitOfWork.Departments.GetAll();

            var department = _unitOfWork.Departments.GetDbSet().Include(u => u.CreatedUser).ToList();
            var vm = _mapper.Map<IEnumerable<DepartmentViewModel>>(department);

            var response = new BaseResponse<IEnumerable<DepartmentViewModel>>(vm, true);

            return response;
        }

        public async Task<BaseResponse<EditDepartmentViewModel>> CreateAsync(EditDepartmentViewModel departmentViewModel)
        {
            var department = _mapper.Map<Department>(departmentViewModel);

<<<<<<< HEAD
            var vm = await _unitOfWork.Departments.AddAsync(department);
=======
            _unitOfWork.Departments.Add(department);
>>>>>>> df040c5eb6c0f547738ba02f7a6e3924818f0a57

            await _unitOfWork.CommitAsync();

            var response = BaseResponse<EditDepartmentViewModel>.Success(_mapper.Map<EditDepartmentViewModel>(vm), null);

            return response;
        }

        public async Task<BaseResponse<EditDepartmentViewModel>> UpdateAsync(EditDepartmentViewModel model)
        {
            var department = _mapper.Map<Department>(model);
             _unitOfWork.Departments.Update(department);

            _unitOfWork.CommitAsync();

            var response = BaseResponse<EditDepartmentViewModel>.Success(_mapper.Map<EditDepartmentViewModel>(department), null);

            return response;
        }

        public async Task<BaseResponse<DepartmentViewModel>> DeleteAsync(Guid id)
        {
            var department = _unitOfWork.Departments.GetByIdAsync(id);
            
            var vm = _mapper.Map<Department>(department);
            _unitOfWork.Departments.Delete(vm);

            _unitOfWork.CommitAsync();

            var response = BaseResponse<DepartmentViewModel>.Success(_mapper.Map<DepartmentViewModel>(vm), null);

            return response;
        }
    }
}